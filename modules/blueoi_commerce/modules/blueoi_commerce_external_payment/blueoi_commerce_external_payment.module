<?php

/**
 * @file
 * Provides the ability to log external payment transactions.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function blueoi_commerce_external_payment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['blueoi_commerce_external_payment'] = array(
    'title' => t('External payment'),
    'description' => t('Provides a way to log external payments.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function blueoi_commerce_external_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $format = 'Y-m-d H:i';

  // Merge in default values.
  $pane_values += array(
    'payment_date' => date($format, $_SERVER['REQUEST_TIME']),
  );

  $options = array(
    'Credit Card',
    'Check',
    'Gift Card',
    'Cash',
    'Other',
  );

  $form['payment_type'] = array(
    '#type' => 'select',
    '#title' => t('Payment type'),
    '#description' => t('Select the type of payment that was made'),
    '#options' => drupal_map_assoc($options),
  );

  $form['payment_date'] = array(
   '#title' => t('Payment Date'),
    '#type' => 'date_popup',
    '#description' => t('Enter the date that the payment was received.'),
    '#required' => TRUE,
    '#date_format' => $format,
    '#date_year_range' => '-0:+1',
    '#default_value' => $pane_values['payment_date'],
  );

  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#description' => t('Enter any notes to be logged with the payment transaction.'),
    '#default_value' => $pane_values['notes'],
    '#required' => FALSE,
  );

  return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function blueoi_commerce_external_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['blueoi_commerce_external_payment'] = $pane_values;
  blueoi_commerce_external_payment_transaction($payment_method, $order, $charge, $pane_values['notes'], $pane_values['payment_date'], $pane_values['payment_type']);
}

/**
 * Creates an payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function blueoi_commerce_external_payment_transaction($payment_method, $order, $charge, $notes, $payment_date, $payment_type) {
  $transaction = commerce_payment_transaction_new('blueoi_commerce_external_payment', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_id = $payment_type;
  $transaction->message = 'Notes: @notes';
  $transaction->message_variables = array('@notes' => $notes);
  $transaction->created = strtotime($payment_date);
  commerce_payment_transaction_save($transaction);
}
